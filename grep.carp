(use Int)

(defmodule Grep
  (register match-star (Fn [Char (Ref String) (Ref String)] Bool))
  (register match-here (Fn [(Ref String) (Ref String)] Bool))

  (defn match-here [regexp text]
    (cond
      (empty? regexp) true
      (and (> (length regexp) 1) (= (head &(tail regexp)) \*))
          (match-star (head regexp) &(tail &(tail regexp)) text)
      (and (= (head regexp) \$)
           (= (length regexp) 1))
        (empty? text)
      (and (not (empty? text))
           (or (= (head regexp) \.)
               (= (head regexp) (head text))))
        (match-here &(tail regexp) &(tail text))
      false))

  (defn match-star [chr regex text]
    (let [matched true]
      (do
        (while matched
          (cond
            (match-here regex text) (break)
            (or (empty? text)
                (and (not (= (head text) chr))
                     (not (= chr \.))))
              (set! matched false)
            (set! text &(tail text))))
        matched)))

  (defn match [regexp text]
    (if (= (head regexp) \^)
      (match-here &(tail regexp) text)
      (let [matched false]
        (do
          (while (and (not matched) (not (empty? text)))
            (if (match-here regexp text)
              (set! matched true)
              (set! text &(tail text))))
          matched))))
)
